/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.ssdeck.business.rest.Api;

import at.ssdeck.business.dto.Profile;
import at.ssdeck.business.rest.ApiUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-07T16:55:22.806765Z[Etc/UTC]")
@Validated
@Tag(name = "User", description = "the User API")
public interface ProfileApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /profile/{username} : Delete profile by id
     *
     * @param username Username of the User (required)
     * @return Successfully deleted User (status code 204)
     *         or Sorry, cannot delete this profile.This User could not be found (status code 404)
     */
    @Operation(
        operationId = "deleteProfile",
        summary = "Delete profile by id",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successfully deleted User"),
            @ApiResponse(responseCode = "404", description = "Sorry, cannot delete this profile.This User could not be found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/profile/{username}"
    )
    default ResponseEntity<Void> deleteProfile(
        @Parameter(name = "username", description = "Username of the User", required = true, in = ParameterIn.PATH) @PathVariable("username") String username
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /profile/{username} : Get Profile
     *
     * @param username username of the user (required)
     * @return OK (status code 200)
     *         or Sorry, this profile information is not available.This User could not be found (status code 404)
     */
    @Operation(
        operationId = "getProfile",
        summary = "Get Profile",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Profile.class))
            }),
            @ApiResponse(responseCode = "404", description = "Sorry, this profile information is not available.This User could not be found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/profile/{username}",
        produces = { "application/json" }
    )
    default ResponseEntity<Profile> getProfile(
        @Parameter(name = "username", description = "username of the user", required = true, in = ParameterIn.PATH) @PathVariable("username") String username
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstname\" : \"firstname\", \"password\" : \"password\", \"email\" : \"email\", \"lastname\" : \"lastname\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /profile/{username} : Update profile
     *
     * @param username username (required)
     * @param profile  (required)
     * @return Updated Profile successfully (status code 200)
     *         or Sorry, this profile  could not be updated.This User could not be found (status code 404)
     */
    @Operation(
        operationId = "updateProfile",
        summary = "Update profile",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated Profile successfully"),
            @ApiResponse(responseCode = "404", description = "Sorry, this profile  could not be updated.This User could not be found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/profile/{username}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateProfile(
        @Parameter(name = "username", description = "username", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "Profile", description = "", required = true) @Valid @RequestBody Profile profile
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
