/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.ssdeck.business.rest.Api;

import at.ssdeck.business.dto.Card;
import at.ssdeck.business.rest.ApiUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-07T16:55:22.806765Z[Etc/UTC]")
@Validated
@Tag(name = "Card", description = "the Card API")
public interface DeckApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /deck : Create a  new card
     *
     * @param card  (required)
     * @return Created Card successfully (status code 201)
     *         or Sorry, could not create Card. Check your entered data and try again. (status code 422)
     */
    @Operation(
        operationId = "createCard",
        summary = "Create a  new card",
        tags = { "Card" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created Card successfully"),
            @ApiResponse(responseCode = "422", description = "Sorry, could not create Card. Check your entered data and try again.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/deck",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createCard(
        @Parameter(name = "Card", description = "", required = true) @Valid @RequestBody Card card
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /deck/{card_id} : Delete card by id
     *
     * @param cardId Id of the card (required)
     * @return Successfully deleted card (status code 200)
     *         or Sorry, this card could not be deleted . (status code 404)
     */
    @Operation(
        operationId = "deleteCard",
        summary = "Delete card by id",
        tags = { "Card" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully deleted card"),
            @ApiResponse(responseCode = "404", description = "Sorry, this card could not be deleted .")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/deck/{card_id}"
    )
    default ResponseEntity<Void> deleteCard(
        @Parameter(name = "card_id", description = "Id of the card", required = true, in = ParameterIn.PATH) @PathVariable("card_id") String cardId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /deck/{card_id} : Get card by id
     *
     * @param cardId Id of the card (required)
     * @return OK (status code 200)
     *         or Sorry, this card could not be found. (status code 404)
     */
    @Operation(
        operationId = "getCard",
        summary = "Get card by id",
        tags = { "Card" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Card.class))
            }),
            @ApiResponse(responseCode = "404", description = "Sorry, this card could not be found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/deck/{card_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Card> getCard(
        @Parameter(name = "card_id", description = "Id of the card", required = true, in = ParameterIn.PATH) @PathVariable("card_id") String cardId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"question\" : \"question\", \"answer\" : \"answer\", \"card_id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /deck : Get all cards
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getDeck",
        summary = "Get all cards",
        tags = { "Card" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Card.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/deck",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Card>> getDeck(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"question\" : \"question\", \"answer\" : \"answer\", \"card_id\" : 0 }, { \"question\" : \"question\", \"answer\" : \"answer\", \"card_id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /deck/{card_id} : Update card
     *
     * @param cardId Id of the card (required)
     * @param card  (required)
     * @return Updated Card successfully (status code 200)
     *         or Sorry, this card could not be updated. (status code 404)
     */
    @Operation(
        operationId = "updateCard",
        summary = "Update card",
        tags = { "Card" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated Card successfully"),
            @ApiResponse(responseCode = "404", description = "Sorry, this card could not be updated.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/deck/{card_id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateCard(
        @Parameter(name = "card_id", description = "Id of the card", required = true, in = ParameterIn.PATH) @PathVariable("card_id") String cardId,
        @Parameter(name = "Card", description = "", required = true) @Valid @RequestBody Card card
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
